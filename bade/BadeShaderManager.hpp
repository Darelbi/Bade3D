/*******************************************************************************
   Copyright (C) 2015 Dario Oliveri
   See copyright notice in LICENSE.md
*******************************************************************************/
#pragma once
#include "BadeForwards.hpp"
#include "BadeStdString.hpp"

namespace Bade {
	
	enum struct TargetShaderVersion: u8{
		GL_300, //currently only this is supported
	};

	class BADE_API ShaderManager{

	public:
	
		/** Returns an object for creating shader options. */
		ShaderOptionsPtr createOptions() = 0;
		
		/** Reuse a shader Options object. */
		ShaderOptionsPtr shallowCopy( ShaderOptionsPtr & options) = 0;
		
		/** Utility usefull for learning and debugging.*/
		StdString generateEmptyVertexShader( 
										ShaderOptionsPtr & options,
										TargetShaderVersion & version) = 0;
										
		/** Utility usefull for learning and debugging.*/								
		StdString generateEmptyFragmentShader(
										ShaderOptionsPtr & options,
										TargetShaderVersion & version) = 0;
										
		/** Utility usefull for learning and debugging.*/
		StdString generateEmptyGeometryShader( // no layers for now sorry ^^
										ShaderOptionsPtr & options,
										TargetShaderVersion & version) = 0;
										
		/** Creates a VertexShader, note that for type safety reasons
			the boiler plate code of the shader is generated by the
			engine. You have only to provide the content of the "main"
			function. If you are in doubt, just see the output of
			"generateEmptyVertexShader".		
		*/
		ShaderPtr createShader(	ShaderOptionsPtr & options,
								TargetShaderVersion & version,
								VertexMain & vertexMain,
								FragmentMain & fragmentMain) = 0;
										
		/** Preferred way to re-use a Shader Object.*/
		ShaderPtr shallowCopy( ShaderPtr & shader) = 0;
	
		virtual ~ShaderManager(){}
	};
} // namespace Bade